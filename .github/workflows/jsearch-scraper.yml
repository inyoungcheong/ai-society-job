name: JSearch Job Scraper

on:
  schedule:
    # Îß§Ï£º Ïõî, Î™© 09:00 UTC (KST 18:00)
    - cron: '0 9 * * 1,4'
  workflow_dispatch:
  push:
    paths:
      - 'j_scraper.py'
      - '.github/workflows/jsearch-scraper.yml'

permissions:
  contents: write
  actions: read

jobs:
  scrape-jobs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests python-dotenv

    - name: Run JSearch scraper
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
      run: |
        python j_scraper.py

    - name: Check result file
      run: |
        if [ -f "data/jsearch_jobs.json" ]; then
          echo "‚úÖ jsearch_jobs.json created successfully"
          echo "üìä File size: $(du -h data/jsearch_jobs.json | cut -f1)"
          echo "üî¢ Job count: $(python -c "import json; data=json.load(open('data/jsearch_jobs.json')); print(data['metadata']['total_jobs'])")"
          echo "üåê API calls used: $(python -c "import json; data=json.load(open('data/jsearch_jobs.json')); print(data['metadata']['api_calls_used'])")"
        else
          echo "‚ùå jsearch_jobs.json not found!"
          exit 1
        fi

    - name: Commit and safely push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git fetch origin main

        git add data/
        if ! git diff --staged --quiet; then
          git commit -m "üîÑ Update job data: $(date -u '+%Y-%m-%d %H:%M UTC')"
          
          # Fast-forward only to avoid conflicts
          git pull origin main --ff-only || echo "‚ö†Ô∏è Fast-forward failed. Skipping push."

          # Push only if pull succeeded
          LOCAL=$(git rev-parse @)
          REMOTE=$(git rev-parse @{u})
          BASE=$(git merge-base @ @{u})
          
          if [ "$LOCAL" = "$REMOTE" ] || [ "$BASE" = "$REMOTE" ]; then
            git push origin main
            echo "‚úÖ Changes pushed to main"
          else
            echo "üö´ Skipping push: local is behind or diverged"
          fi
        else
          echo "‚ÑπÔ∏è No changes to commit"
